{"version":3,"sources":["assets/noPosterSmall.png","Components/Header.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Search/SearchPresenter.js","Components/Section.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","reportWebVitals.js","index.js"],"names":["module","exports","Header","styled","header","List","ul","Item","li","props","current","SLink","Link","withRouter","pathname","location","to","Container","div","Loader","role","aria-label","Text","span","color","Message","text","Image","bgUrl","Rating","ImageContainer","Title","Year","Poster","id","imageUrl","title","rating","year","isMovie","require","length","substring","Form","form","Input","input","Search","movieResults","tvResultes","searchTerm","error","loading","handleSubmit","updateTerm","Helmet","onSubmit","onChange","value","placeholder","map","movie","original_title","poster_path","release_date","vote_average","show","original_name","first_air_date","Grid","Section","children","Home","nowPlaying","upcoming","popular","api","axios","create","baseURL","params","api_key","language","moviesApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","useState","setNowPlaying","setupcoming","setPopular","setError","setLoading","useEffect","a","data","results","console","log","fetchData","HomePresenter","TVPresenter","topRated","airingToday","TVContainer","setTopRated","setAiringToday","SearchContainer","setMovieResults","setTVResults","setSearchTerm","searchByTerm","showResults","SearchPresenter","e","preventDefault","target","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Devider","Overview","p","Detail","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","overview","DetailContainer","setResult","includes","match","push","history","parsedId","parseInt","isNaN","DetailPresenter","path","exact","component","TV","render","from","globalStyles","createGlobalStyle","reset","App","className","Router","GlobalStyles","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,2C,s3BCK3C,IAAMC,EAASC,IAAOC,OAAV,KAaNC,EAAOF,IAAOG,GAAV,KAGJC,EAAOJ,IAAOK,GAAV,KAImB,SAAAC,GAAK,OAAIA,EAAMC,QAAU,UAAY,iBAG5DC,EAAQR,YAAOS,IAAPT,CAAH,KAOIU,eAAW,gBAAeC,EAAf,EAAGC,SAAYD,SAAf,OACxB,cAACZ,EAAD,UAEE,eAACG,EAAD,WACE,cAACE,EAAD,CAAMG,QAAsB,MAAbI,EAAf,SACE,cAACH,EAAD,CAAOK,GAAG,IAAV,sBAEF,cAACT,EAAD,CAAMG,QAAqB,QAAZI,EAAf,SACE,cAACH,EAAD,CAAOK,GAAG,MAAV,kBAEF,cAACT,EAAD,CAAMG,QAAsB,YAAbI,EAAf,SACE,cAACH,EAAD,CAAOK,GAAG,UAAV,8B,qPC3CR,IAAMC,EAAYd,IAAOe,IAAV,KAeAC,EANA,kBACX,cAACF,EAAD,UACI,sBAAMG,KAAK,MAAMC,aAAW,SAA5B,6B,oOCVR,IAAMJ,EAAYd,IAAOe,IAAV,KAKTI,EAAOnB,IAAOoB,KAAV,KACG,SAAAd,GAAK,OAAIA,EAAMe,SAcbC,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMF,EAAT,EAASA,MAAT,OACZ,cAAC,EAAD,UACI,cAACF,EAAD,CAAME,MAAQA,EAAd,SAAwBE,O,ghCCVhC,IAAMT,EAAYd,IAAOe,IAAV,KAITS,EAAQxB,IAAOe,IAAV,KAGiB,SAAAT,GAAK,OAAIA,EAAMmB,SAOrCC,EAAS1B,IAAOoB,KAAV,KAONO,EAAiB3B,IAAOe,IAAV,IAIVS,EAGAE,GAMJE,EAAQ5B,IAAOoB,KAAV,KAMLS,EAAO7B,IAAOoB,KAAV,KAgCKU,EA3BA,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,OAAQC,EAAhC,EAAgCA,KAAhC,IAAsCC,eAAtC,gBACX,cAAC,IAAD,CAAMvB,GAAIuB,EAAO,iBAAaL,GAAb,gBAA6BA,GAA9C,SACI,eAAC,EAAD,WACI,eAACJ,EAAD,WACI,cAACH,EAAD,CAAOC,MAAQO,EAAQ,yCAAqCA,GAAaK,EAAQ,MACjF,eAACX,EAAD,WACI,sBAAMT,KAAK,MAAMC,aAAW,SAA5B,0BAEQ,IACNgB,EAJN,YAOJ,cAACN,EAAD,UAASK,EAAMK,OAAS,GAAf,UAAuBL,EAAMM,UAAU,EAAG,IAA1C,OAAqDN,IAC9D,cAACJ,EAAD,UAAQM,U,gVCtDpB,IAAMrB,EAAYd,IAAOe,IAAV,KAITyB,EAAOxC,IAAOyC,KAAV,KAKJC,EAAQ1C,IAAO2C,MAAV,KA6EIC,EAvEA,SAAC,GAAD,IACXC,EADW,EACXA,aACAC,EAFW,EAEXA,WACAC,EAHW,EAGXA,WACAC,EAJW,EAIXA,MACAC,EALW,EAKXA,QACAC,EANW,EAMXA,aACAC,EAPW,EAOXA,WAPW,OAQT,qCACF,cAACC,EAAA,EAAD,UAAQ,yDACR,eAAC,EAAD,WACA,cAACZ,EAAD,CAAMa,SAAWH,EAAjB,SACI,cAACR,EAAD,CACIY,SAAWH,EACXI,MAAQR,EACRS,YAAY,+BAGlBP,EAAU,cAAC,EAAD,IAAa,qCACpBJ,GAAgBA,EAAaP,OAAS,GACnC,cAAC,GAAD,CAASL,MAAM,eAAf,SACMY,EAAaY,KAAK,SAAAC,GAAK,OACrB,cAAC,EAAD,CACI3B,GAAK2B,EAAM3B,GACXK,SAAY,EACZH,MAAQyB,EAAMC,eACd3B,SAAa0B,EAAME,YACnBzB,KAAOuB,EAAMG,cAAgBH,EAAMG,aAAatB,UAAU,EAAG,GAC7DL,OAASwB,EAAMI,oBAM9BhB,GAAcA,EAAWR,OAAS,GAC/B,cAAC,GAAD,CAASL,MAAM,iBAAf,SACMa,EAAWW,KAAK,SAAAM,GAAI,OAClB,cAAC,EAAD,CACIhC,GAAKgC,EAAKhC,GACVE,MAAQ8B,EAAKC,cACbhC,SAAa+B,EAAKH,YAClBzB,KAAO4B,EAAKE,gBAAkBF,EAAKE,eAAe1B,UAAU,EAAG,GAC/DL,OAAS6B,EAAKD,oBAM5Bd,GAAS,cAAC,EAAD,CAASzB,KAAMyB,EAAO3B,MAAM,YAGnCwB,GACAC,GACwB,IAAxBD,EAAaP,QACS,IAAtBQ,EAAWR,QACX,cAAC,EAAD,CAASf,KAAK,iBAAiBF,MAAM,kBA/C3C,Q,4bC3BN,IAAMP,GAAYd,IAAOe,IAAV,MAKTa,GAAQ5B,IAAOoB,KAAV,MAIL8C,GAAOlE,IAAOe,IAAV,MAsBKoD,GAfC,SAAC,GAAD,IAAElC,EAAF,EAAEA,MAAOmC,EAAT,EAASA,SAAT,OACZ,eAAC,GAAD,WACI,cAAC,GAAD,UAAQnC,IACR,cAACiC,GAAD,UAAOE,Q,6FCff,IAAMtD,GAAYd,IAAOe,IAAV,MAyEAsD,GArEF,SAAC,GAAD,IACTC,EADS,EACTA,WACAC,EAFS,EAETA,SACAC,EAHS,EAGTA,QACAxB,EAJS,EAITA,MACAC,EALS,EAKTA,QALS,OAMP,qCACF,cAACG,EAAA,EAAD,UAAQ,yDAEJH,EAAU,cAAC,EAAD,IACT,eAAC,GAAD,WACIqB,GAAcA,EAAWhC,OAAS,GAC/B,cAAC,GAAD,CAASL,MAAM,cAAf,SACKqC,EAAWb,KAAI,SAAAC,GAAK,OACjB,cAAC,EAAD,CACI3B,GAAK2B,EAAM3B,GACXK,SAAY,EACZH,MAAQyB,EAAMC,eACd3B,SAAa0B,EAAME,YACnBzB,KAAOuB,EAAMG,cAAgBH,EAAMG,aAAatB,UAAU,EAAG,GAC7DL,OAASwB,EAAMI,oBAM9BS,GAAYA,EAASjC,OAAS,GAC3B,cAAC,GAAD,CAASL,MAAM,kBAAf,SACKsC,EAASd,KAAI,SAAAC,GAAK,OACf,cAAC,EAAD,CACI3B,GAAK2B,EAAM3B,GACXK,SAAY,EACZH,MAAQyB,EAAMC,eACd3B,SAAa0B,EAAME,YACnBzB,KAAOuB,EAAMG,cAAgBH,EAAMG,aAAatB,UAAU,EAAG,GAC7DL,OAASwB,EAAMI,oBAM9BU,GAAWA,EAAQlC,OAAS,GACzB,cAAC,GAAD,CAASL,MAAM,iBAAf,SACKuC,EAAQf,KAAI,SAAAC,GAAK,OACd,cAAC,EAAD,CACI3B,GAAK2B,EAAM3B,GACXK,SAAY,EACZH,MAAQyB,EAAMC,eACd3B,SAAa0B,EAAME,YACnBzB,KAAOuB,EAAMG,cAAgBH,EAAMG,aAAatB,UAAU,EAAG,GAC7DL,OAASwB,EAAMI,oBAM9Bd,GAAS,cAAC,EAAD,CAASzB,KAAMyB,EAAO3B,MAAM,mB,SCnE5CoD,G,QAAMC,EAAMC,OAAO,CACvBC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIRC,GACQ,kBAAMP,GAAIQ,IAAI,sBADtBD,GAEM,kBAAMP,GAAIQ,IAAI,mBAFpBD,GAGK,kBAAMP,GAAIQ,IAAI,kBAHnBD,GAIS,SAAAjD,GAAE,OAAI0C,GAAIQ,IAAJ,gBAAiBlD,GAAM,CACxC8C,OAAQ,CACNK,mBAAoB,aANpBF,GASI,SAAAG,GAAI,OAAIV,GAAIQ,IAAI,eAAgB,CACtCJ,OAAQ,CACNO,MAAOC,mBAAmBF,OAK1BG,GACK,kBAAMb,GAAIQ,IAAI,eADnBK,GAEM,kBAAMb,GAAIQ,IAAI,iBAFpBK,GAGS,kBAAMb,GAAIQ,IAAI,oBAHvBK,GAIQ,SAAAvD,GAAE,OAAI0C,GAAIQ,IAAJ,aAAclD,GAAM,CACpC8C,OAAQ,CACNK,mBAAoB,aANpBI,GASI,SAAAH,GAAI,OAAIV,GAAIQ,IAAI,YAAa,CACnCJ,OAAQ,CACNO,MAAOC,mBAAmBF,OCnCjBI,GCEA,WAAO,IAAD,EACiBC,mBAAS,MAD1B,mBACblB,EADa,KACDmB,EADC,OAEaD,mBAAS,MAFtB,mBAEbjB,EAFa,KAEHmB,EAFG,OAGWF,mBAAS,MAHpB,mBAGbhB,EAHa,KAGJmB,EAHI,OAIOH,mBAAS,MAJhB,mBAIbxC,EAJa,KAIN4C,EAJM,OAKWJ,oBAAS,GALpB,mBAKbvC,EALa,KAKJ4C,EALI,KA6BnB,OAtBAC,qBAAU,YACO,uCAAG,sCAAAC,EAAA,+EAE8Bf,KAF9B,uBAESV,EAFT,EAEP0B,KAAOC,QAFA,SAG4BjB,KAH5B,uBAGST,EAHT,EAGPyB,KAAOC,QAHA,UAI2BjB,KAJ3B,iBAISR,EAJT,EAIPwB,KAAOC,QACdC,QAAQC,IAAI3B,GAEZiB,EAAcnB,GACdoB,EAAYnB,GACZoB,EAAWnB,GATG,kDAYdoB,EAAS,iCAZK,yBAcdC,GAAW,GAdG,6EAAH,qDAkBfO,KACC,IAGD,cAACC,GAAD,CACE/B,WAAeA,EACfC,SAAaA,EACbC,QAAYA,EACZxB,MAAUA,EACVC,QAAYA,K,6FC9BlB,IAAMnC,GAAYd,IAAOe,IAAV,MAsEAuF,GAlEK,SAAC,GAAD,IAChB9B,EADgB,EAChBA,QACA+B,EAFgB,EAEhBA,SACAC,EAHgB,EAGhBA,YACAxD,EAJgB,EAIhBA,MACAC,EALgB,EAKhBA,QALgB,OAMd,qCACF,cAACG,EAAA,EAAD,UAAQ,2DAEJH,EAAU,cAAC,EAAD,IACT,eAAC,GAAD,WACKsD,GAAYA,EAASjE,OAAS,GAC5B,cAAC,GAAD,CAASL,MAAM,kBAAf,SACMsE,EAAS9C,KAAK,SAAAM,GAAI,OAChB,cAAC,EAAD,CACIhC,GAAKgC,EAAKhC,GACVE,MAAQ8B,EAAKC,cACbhC,SAAa+B,EAAKH,YAClBzB,KAAO4B,EAAKE,gBAAkBF,EAAKE,eAAe1B,UAAU,EAAG,GAC/DL,OAAS6B,EAAKD,oBAM5BU,GAAWA,EAAQlC,OAAS,GAC1B,cAAC,GAAD,CAASL,MAAM,gBAAf,SACMuC,EAAQf,KAAK,SAAAM,GAAI,OACf,cAAC,EAAD,CACIhC,GAAKgC,EAAKhC,GACVE,MAAQ8B,EAAKC,cACbhC,SAAa+B,EAAKH,YAClBzB,KAAO4B,EAAKE,gBAAkBF,EAAKE,eAAe1B,UAAU,EAAG,GAC/DL,OAAS6B,EAAKD,oBAM5B0C,GAAeA,EAAYlE,OAAS,GAClC,cAAC,GAAD,CAASL,MAAM,eAAf,SACMuE,EAAY/C,KAAK,SAAAM,GAAI,OACnB,cAAC,EAAD,CACIhC,GAAKgC,EAAKhC,GACVE,MAAQ8B,EAAKC,cACbhC,SAAa+B,EAAKH,YAClBzB,KAAO4B,EAAKE,gBAAkBF,EAAKE,eAAe1B,UAAU,EAAG,GAC/DL,OAAS6B,EAAKD,oBAM7Bd,GAAS,cAAC,EAAD,CAASzB,KAAMyB,EAAO3B,MAAM,mBChEnCoF,GCEA,WAAO,IAAD,EACWjB,mBAAS,MADpB,mBACbhB,EADa,KACJmB,EADI,OAEaH,mBAAS,MAFtB,mBAEbe,EAFa,KAEHG,EAFG,OAGmBlB,mBAAS,MAH5B,mBAGbgB,EAHa,KAGAG,EAHA,OAIOnB,mBAAS,MAJhB,mBAIbxC,EAJa,KAIN4C,EAJM,OAKWJ,oBAAS,GALpB,mBAKbvC,EALa,KAKJ4C,EALI,KA2BnB,OApBAC,qBAAU,YACO,uCAAG,sCAAAC,EAAA,+EAE2BT,KAF3B,uBAESd,EAFT,EAEPwB,KAAOC,QAFA,SAG4BX,KAH5B,uBAGSiB,EAHT,EAGPP,KAAOC,QAHA,UAI+BX,KAJ/B,iBAISkB,EAJT,EAIPR,KAAOC,QAGdN,EAAWnB,GACXkC,EAAYH,GACZI,EAAeH,GATD,kDAWdZ,EAAS,6BAXK,yBAadC,GAAW,GAbG,6EAAH,qDAgBfO,KACC,IAGD,cAAC,GAAD,CACE5B,QAAYA,EACZ+B,SAAaA,EACbC,YAAgBA,EAChBxD,MAAUA,EACVC,QAAYA,KCnCH2D,GCEA,WAAO,IAAD,EACqBpB,mBAAS,MAD9B,mBACb3C,EADa,KACCgE,EADD,OAEgBrB,mBAAS,MAFzB,mBAEb1C,EAFa,KAEDgE,EAFC,OAGiBtB,mBAAS,IAH1B,mBAGbzC,EAHa,KAGDgE,EAHC,OAIOvB,mBAAS,MAJhB,mBAIbxC,EAJa,KAIN4C,EAJM,OAKWJ,oBAAS,GALpB,mBAKbvC,EALa,KAKJ4C,EALI,KAwBbmB,EAAY,uCAAG,kCAAAjB,EAAA,6DACnBF,GAAW,GADQ,kBAG6Bb,GAAiBjC,GAH9C,uBAGMF,EAHN,EAGVmD,KAAOC,QAHG,SAI4BX,GAAavC,GAJzC,gBAIMkE,EAJN,EAIVjB,KAAOC,QAGdY,EAAgBhE,GAChBiE,EAAaG,GARI,kDAUjBrB,EAAS,sBAVQ,yBAYjBC,GAAW,GAZM,6EAAH,qDAgBlB,OACE,cAACqB,EAAD,CACErE,aAAiBA,EACjBC,WAAeA,EACfC,WAAeA,EACfC,MAAUA,EACVC,QAAYA,EACZC,aApCiB,SAACiE,GACpBA,EAAEC,iBACgB,KAAfrE,GACDiE,KAkCA7D,WA9Be,SAACgE,GAAO,IACP5D,EAAY4D,EAAtBE,OAAU9D,MAClBwD,EAAcxD,O,ikDCjBlB,IAAMzC,GAAYd,IAAOe,IAAV,MAOTuG,GAAWtH,IAAOe,IAAV,MAMc,SAAAT,GAAK,OAAIA,EAAMiH,WAQrCC,GAAUxH,IAAOe,IAAV,MAQP0G,GAAQzH,IAAOe,IAAV,MAIiB,SAAAT,GAAK,OAAIA,EAAMiH,WAMrCG,GAAO1H,IAAOe,IAAV,MAKJa,GAAQ5B,IAAO2H,GAAV,MAKLC,GAAgB5H,IAAOe,IAAV,MAIbX,GAAOJ,IAAOoB,KAAV,MAGJyG,GAAU7H,IAAOoB,KAAV,MAIP0G,GAAW9H,IAAO+H,EAAV,MAyECC,GAjEA,SAAC,GAAD,IACXC,EADW,EACXA,OACAjF,EAFW,EAEXA,MAFW,SAGXC,QAEI,qCACI,cAACG,EAAA,EAAD,UAAQ,0DACR,cAAC,EAAD,OAGJJ,EACA,cAAC,EAAD,IACA,eAAC,GAAD,WACI,cAACI,EAAA,EAAD,UACI,kCACI6E,EAAOtE,eACPsE,EAAOtE,eACPsE,EAAOjE,cAHX,oBAMJ,cAACsD,GAAD,CACIC,QAAO,6CAA0CU,EAAOC,iBAE5D,eAACV,GAAD,WACI,cAACC,GAAD,CACIF,QAAWU,EAAOrE,YAAP,6CAA2DqE,EAAOrE,aAAgBvB,EAAQ,MAEzG,eAACqF,GAAD,WACI,cAAC,GAAD,UACIO,EAAOtE,eACPsE,EAAOtE,eACPsE,EAAOjE,gBAEX,eAAC4D,GAAD,WACI,cAAC,GAAD,UACIK,EAAOpE,aACPoE,EAAOpE,aAAatB,UAAU,EAAG,GACjC0F,EAAOhE,eAAe1B,UAAU,EAAG,KAEvC,cAACsF,GAAD,qBACA,eAAC,GAAD,WACKI,EAAOE,QACRF,EAAOE,QACPF,EAAOG,iBAHX,UAKA,cAACP,GAAD,qBACA,cAAC,GAAD,UACII,EAAOI,QACPJ,EAAOI,OAAO5E,KAAI,SAAC6E,EAAOC,GAAR,OAAkBA,IAAUN,EAAOI,OAAO/F,OAAS,EACrEgG,EAAME,KAD8B,UAEjCF,EAAME,KAF2B,YAIxC,cAACV,GAAD,UAAWG,EAAOQ,wBC7H3BC,GCEA,SAACpI,GAAW,IACNK,EAAcL,EAAzBM,SAAWD,SADK,EAEI6E,mBAAS,MAFb,mBAElByC,EAFkB,KAEVU,EAFU,OAGEnD,mBAAS,MAHX,mBAGlBxC,EAHkB,KAGX4C,EAHW,OAIMJ,oBAAS,GAJf,mBAIlBvC,EAJkB,KAIT4C,EAJS,KAKpBzD,EAAUzB,EAASiI,SAAS,WAmChC,OAhCA9C,qBAAU,YACO,uCAAG,sCAAAC,EAAA,yDACShE,EAA0BzB,EAA5CuI,MAAQhE,OAAU9C,GAAiB+G,EAASxI,EAAnByI,QAAUD,KACpCE,EAAWC,SAASlH,IAGvBmH,MAAMF,GALO,yCAMPF,EAAK,MANE,oBAUX1G,EAVW,iCAWY4C,GAAsBgE,GAXlC,gBAWJf,EAXI,EAWVjC,KAXU,yCAaYV,GAAiB0D,GAb7B,iBAaJf,EAbI,EAaVjC,KAbU,QAedE,QAAQC,IAAI8B,GACZU,EAAUV,GAhBI,kDAmBdrC,EAAU,uBAnBI,yBAqBdC,GAAW,GArBG,6EAAH,qDA4BfO,KACA,IAGA,cAAC+C,GAAD,CACElB,OAAWA,EACXjF,MAAUA,EACVC,QAAYA,KCxCH,qBACb,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmG,KAAK,IAAIC,OAAK,EAACC,UAAYjF,KAClC,cAAC,IAAD,CAAO+E,KAAK,MAAMC,OAAK,EAACC,UAAYC,KACpC,cAAC,IAAD,CAAOH,KAAK,cAAcI,OAAQ,kBAAI,4CACtC,cAAC,IAAD,CAAOJ,KAAK,UAAUE,UAAY1G,KAClC,cAAC,IAAD,CAAOwG,KAAK,aAAaE,UAAYtB,KACrC,cAAC,IAAD,CAAOoB,KAAK,YAAYE,UAAYtB,KACpC,cAAC,IAAD,CAAUyB,KAAK,IAAI5I,GAAG,a,6ZCf5B,IAoBe6I,GApBMC,YAAH,KACdC,MCSWC,OATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAACC,GAAD,IACA,cAACC,GAAD,QCISC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASlB,OACP,cAAC,IAAMmB,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.492d79ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noPosterSmall.af0862d5.png\";","import React from 'react';\nimport { Link, withRouter } from \"react-router-dom\";\nimport styled from 'styled-components';\n// withRouter : router의 정보를 가져옴\n\nconst Header = styled.header`\n  position: fixed;\n  display: flex;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 50px;\n  padding: 0 10px;\n  align-items: center;\n  color: white;\n  background-color: rgba(20, 20, 20, 0.8);\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\n`;\nconst List = styled.ul`\n  display: flex;\n`;\nconst Item = styled.li`\n  width: 80px;\n  height: 50px\n  text-align: center;\n  border-bottom: 5px solid ${props => props.current ? \"#3498db\" : \"transparent\"};\n  transition: border-bottom 0.5s ease-in-out;\n`;\nconst SLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 50px;\n`;\n\nexport default withRouter(({ location: { pathname } }) => (\n  <Header>\n    {/* {console.log(props)} */}\n    <List>\n      <Item current={pathname === \"/\"}>\n        <SLink to=\"/\">Movies</SLink>\n      </Item>\n      <Item current={pathname ===\"/tv\"}>\n        <SLink to=\"/tv\">TV</SLink>\n      </Item>\n      <Item current={pathname === \"/search\"}>\n        <SLink to=\"/search\">Search</SLink>\n      </Item>\n    </List>\n  </Header>\n));","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    width: 100wh;\n    height: 100vh;\n    margin-top: 20px;\n    font-size: 28px;\n`;\n\nconst Loader = () => ( \n    <Container>\n        <span role=\"img\" aria-label=\"Loding\">🤖</span>\n    </Container>\n);\n\nexport default Loader;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    display: flex;\n    width: 100vw;\n    justify-content: center;\n`;\nconst Text = styled.span`\n    color: ${props => props.color};\n`;\n\nconst Message = ({ text, color }) => (\n    <Container>\n        <Text color={ color }>{ text }</Text>\n    </Container>\n)\n\nMessage.propTypes = {\n    text: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired\n}\n\nexport default Message;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    font-size: 12px;\n`;\n\nconst Image = styled.div`\n    height: 180px;\n    margin-bottom: 10px;\n    background-image: url(${props => props.bgUrl});\n    background-size: cover;\n    border-radius: 4px;\n    background-position: center center;\n    transition: opacity 0.2s linear;\n`;\n\nconst Rating = styled.span`\n    position: absolute;\n    right: 5px;\n    bottom: 5px;\n    opacity: 0;\n`;\n\nconst ImageContainer = styled.div`\n    position: relative;\n    margin-bottom: 5px;\n    &:hover {\n        ${Image} {\n            opacity: 0.3;\n        }\n        ${Rating} {\n            opacity: 1;\n        }\n    }\n`;\n\nconst Title = styled.span`\n    display: block;\n    margin-bottom: 3px;\n    font-size: 12px;\n`;\n\nconst Year = styled.span`\n    font-size: 10px;\n    color: rgba(255, 255, 255, 0.5)\n`;\n\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\n    <Link to={isMovie ? `/movie/${id}` : `/show/${id}` } >\n        <Container>\n            <ImageContainer>\n                <Image bgUrl={ imageUrl ? `https://image.tmdb.org/t/p/w300${imageUrl}` : require(\"../assets/noPosterSmall.png\")} />\n                <Rating>\n                    <span role=\"img\" aria-label=\"rating\">\n                        ⭐️\n                    </span>{\" \"}\n                    { rating }/10\n                </Rating>\n            </ImageContainer>\n            <Title>{ title.length > 15 ? `${title.substring(0, 15)}...` : title }</Title>\n            <Year>{ year }</Year>\n        </Container>\n    </Link>\n);\n\nPoster.propTypes = {\n    id: PropTypes.number.isRequired,\n    imageUrl: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    rating: PropTypes.number,\n    year: PropTypes.string,\n    isMovie: PropTypes.bool  \n}\n\nexport default Poster;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Helmet from 'react-helmet';\nimport Loader from 'Components/Loader';\nimport Section from 'Components/Section';\nimport Message from 'Components/Message';\nimport Poster from 'Components/Poster';\n\nconst Container = styled.div`\n    padding: 0 20px;\n`;\n\nconst Form = styled.form`\n    width: 100%;\n    margin-bottom: 50px;\n`;\n\nconst Input = styled.input`\n    all: unset;\n    width: 100%;\n    font-size: 28px;\n`;\n\nconst Search = ({ \n    movieResults, \n    tvResultes, \n    searchTerm, \n    error, \n    loading, \n    handleSubmit,\n    updateTerm \n}) => <>\n    <Helmet><title>Search | Reactflix</title></Helmet>\n    <Container>\n    <Form onSubmit={ handleSubmit }>\n        <Input \n            onChange={ updateTerm } \n            value={ searchTerm } \n            placeholder=\"Search Movies or TV show\" \n        />\n    </Form>\n    { loading ? <Loader /> : <>\n        {movieResults && movieResults.length > 0 && \n            <Section title=\"Movie Result\"> \n                { movieResults.map( movie => (\n                    <Poster \n                        id={ movie.id }\n                        isMovie = { true }\n                        title={ movie.original_title } \n                        imageUrl = { movie.poster_path }\n                        year={ movie.release_date && movie.release_date.substring(0, 4) } \n                        rating={ movie.vote_average } \n                    />\n                ))}\n            </Section>\n        }\n\n        {tvResultes && tvResultes.length > 0 && \n            <Section title=\"TV Show Result\"> \n                { tvResultes.map( show => (\n                    <Poster \n                        id={ show.id }\n                        title={ show.original_name } \n                        imageUrl = { show.poster_path }\n                        year={ show.first_air_date && show.first_air_date.substring(0, 4) } \n                        rating={ show.vote_average } \n                    />\n                ))}\n            </Section>\n        }\n\n        { error && <Message text={error} color=\"#e74c3c\" /> }\n\n        { \n            movieResults && \n            tvResultes && \n            movieResults.length === 0 && \n            tvResultes.length === 0 &&(\n            <Message text=\"Nothing Found \" color=\"#95a5a6\" />\n        )}\n    </>}\n</Container>;\n</>\n\nSearch.propTypes = {\n    movieResults: PropTypes.array,\n    tvResultes: PropTypes.array,\n    searchTerm: PropTypes.string,\n    error: PropTypes.string,\n    loading: PropTypes.bool.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n    updateTerm: PropTypes.func.isRequired\n}\n\nexport default Search;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Search from 'Routes/Search/SearchPresenter';\n\nconst Container = styled.div`\n    :not(:last-child) {\n        margin-bottom: 50px;\n    }\n`;\nconst Title = styled.span`\n    font-size: 16px;\n    font-weight: 600;\n`;\nconst Grid = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 125px);\n    grid-gap: 25px;\n    margin-top: 25px;\n`;\n\nconst Section = ({title, children}) => (\n    <Container>\n        <Title>{title}</Title>\n        <Grid>{children}</Grid>\n    </Container>\n);\n\nSection.propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n}\n\nexport default Section;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Helmet from 'react-helmet';\nimport Section from 'Components/Section';\nimport Loader from 'Components/Loader';\nimport Message from 'Components/Message';\nimport Poster from 'Components/Poster';\n\nconst Container = styled.div`\n    padding: 20px;\n`;\n\nconst Home = ({ \n    nowPlaying, \n    upcoming, \n    popular, \n    error, \n    loading\n}) => <>\n    <Helmet><title>Movies | Reactflix</title></Helmet>\n    {\n        loading ? <Loader /> : \n        (<Container>\n            {nowPlaying && nowPlaying.length > 0 && (\n                <Section title=\"Now Playing\">\n                    {nowPlaying.map(movie => (\n                        <Poster \n                            id={ movie.id }\n                            isMovie = { true }\n                            title={ movie.original_title } \n                            imageUrl = { movie.poster_path }\n                            year={ movie.release_date && movie.release_date.substring(0, 4) } \n                            rating={ movie.vote_average } \n                        />\n                    ))}\n                </Section>\n            )}\n    \n            {upcoming && upcoming.length > 0 && (\n                <Section title=\"Upcoming Movies\">\n                    {upcoming.map(movie => (\n                        <Poster \n                            id={ movie.id }\n                            isMovie = { true }\n                            title={ movie.original_title } \n                            imageUrl = { movie.poster_path }\n                            year={ movie.release_date && movie.release_date.substring(0, 4) } \n                            rating={ movie.vote_average } \n                        />\n                    ))}\n                </Section>\n            )}\n    \n            {popular && popular.length > 0 && (\n                <Section title=\"Popular Movies\">\n                    {popular.map(movie => (\n                        <Poster \n                            id={ movie.id }\n                            isMovie = { true }\n                            title={ movie.original_title } \n                            imageUrl = { movie.poster_path }\n                            year={ movie.release_date && movie.release_date.substring(0, 4) } \n                            rating={ movie.vote_average } \n                        />\n                    ))}\n                </Section>\n            )}\n    \n            {error && <Message text={error} color=\"#e74c3c\" />}\n        </Container>)\n    }\n</>\n\nHome.propTypes = {\n    nowPlaying: PropTypes.array,\n    upcoming: PropTypes.array,\n    popular: PropTypes.array,\n    error: PropTypes.string,\n    loading: PropTypes.bool.isRequired\n}\n\nexport default Home;","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: \"357ad6a3e1369f05856eff3e04365942\",\n    language: \"en-US\"\n  }\n});\n\nconst moviesApi = {\n  nowPlaying: () => api.get('movie/now_playing'),\n  upcoming: () => api.get('movie/upcoming'),\n  popular: () => api.get('movie/popular'),\n  movieDetail: id => api.get(`movie/${id}`, {\n    params: {\n      append_to_response: 'videos'\n    }\n  }),\n  search: term => api.get('search/movie', {\n    params: {\n      query: encodeURIComponent(term)\n    }\n  })\n}\n\nconst tvApi = {\n  popular: () => api.get('tv/popular'),\n  topRated: () => api.get('tv/top_rated'),\n  airingToday: () => api.get('tv/airing_today'),\n  showDetail: id => api.get(`tv/${id}`, {\n    params: {\n      append_to_response: 'videos'\n    }\n  }),\n  search: term => api.get('search/tv', {\n    params: {\n      query: encodeURIComponent(term)\n    }\n  })\n}\n\nexport { moviesApi, tvApi }\n\n// 확인용 개발자도구 - network\n// api.get('movie/popular');\n// export default api;","import HomeContainer from './HomeContainer';\n\nexport default HomeContainer;","import React, { useState, useEffect } from 'react';\nimport HomePresenter from './HomePresenter';\nimport { moviesApi } from 'api';\n\nexport default () => {\n  let [ nowPlaying, setNowPlaying ] = useState(null);\n  let [ upcoming, setupcoming ] = useState(null);\n  let [ popular, setPopular ] = useState(null);\n  let [ error, setError ] = useState(null);\n  let [ loading, setLoading ] = useState(true);\n\n  useEffect(()=>{\n    const fetchData = async () => {\n      try {\n        const {data: {results: nowPlaying}} = await moviesApi.nowPlaying();\n        const {data: {results: upcoming}} = await moviesApi.upcoming();\n        const {data: {results: popular}} = await moviesApi.popular();\n        console.log(popular); \n\n        setNowPlaying(nowPlaying);\n        setupcoming(upcoming);\n        setPopular(popular);\n\n      } catch(e) {\n        setError(\"can't find movies information\")\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <HomePresenter \n      nowPlaying = { nowPlaying }\n      upcoming = { upcoming }\n      popular = { popular }\n      error = { error }\n      loading = { loading }\n    />\n  );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Helmet from 'react-helmet';\nimport Section from 'Components/Section';\nimport Loader from 'Components/Loader';\nimport Message from 'Components/Message';\nimport Poster from 'Components/Poster';\n\nconst Container = styled.div`\n    padding: 20px;\n`;\n\nconst TVPresenter = ({ \n    popular, \n    topRated, \n    airingToday, \n    error, \n    loading \n}) => <>\n    <Helmet><title>TV Shows | Reactflix</title></Helmet>\n    {\n        loading ? <Loader /> : \n        (<Container>\n            { topRated && topRated.length > 0 && (\n                <Section title=\"Top Rated Shows\">\n                    { topRated.map( show => (\n                        <Poster \n                            id={ show.id }\n                            title={ show.original_name } \n                            imageUrl = { show.poster_path }\n                            year={ show.first_air_date && show.first_air_date.substring(0, 4) } \n                            rating={ show.vote_average } \n                        />\n                    ))}\n                </Section>\n            )}\n    \n            { popular && popular.length > 0 && (\n                <Section title=\"Popular Shows\">\n                    { popular.map( show => (\n                        <Poster \n                            id={ show.id }\n                            title={ show.original_name } \n                            imageUrl = { show.poster_path }\n                            year={ show.first_air_date && show.first_air_date.substring(0, 4) } \n                            rating={ show.vote_average } \n                        />\n                    ))}\n                </Section>\n            )}\n    \n            { airingToday && airingToday.length > 0 && (\n                <Section title=\"Airing Today\">\n                    { airingToday.map( show => (\n                        <Poster \n                            id={ show.id }\n                            title={ show.original_name } \n                            imageUrl = { show.poster_path }\n                            year={ show.first_air_date && show.first_air_date.substring(0, 4) } \n                            rating={ show.vote_average } \n                        />\n                    ))}\n                </Section>\n            )}\n    \n            {error && <Message text={error} color=\"#e74c3c\" />}\n        </Container>)\n    }\n</>\n\nTVPresenter.propTypes = {\n    popular: PropTypes.array,\n    topRated: PropTypes.array,\n    airingToday: PropTypes.array,\n    error: PropTypes.string,\n    loading: PropTypes.bool.isRequired\n}\n\nexport default TVPresenter;","import TVContainer from './TVContainer';\n\nexport default TVContainer;","import React, { useState, useEffect } from 'react';\nimport TVPresenter from './TVPresenter';\nimport { tvApi } from 'api';\n\nexport default () => {\n  let [ popular, setPopular ] = useState(null);\n  let [ topRated, setTopRated ] = useState(null);\n  let [ airingToday, setAiringToday ] = useState(null);\n  let [ error, setError ] = useState(null);\n  let [ loading, setLoading ] = useState(true);\n\n  useEffect(()=>{\n    const fetchData = async () => {\n      try {\n        const {data: {results: popular}} = await tvApi.popular();\n        const {data: {results: topRated}} = await tvApi.topRated();\n        const {data: {results: airingToday}} = await tvApi.airingToday();\n        // console.log(airingToday);\n\n        setPopular(popular);\n        setTopRated(topRated);\n        setAiringToday(airingToday);\n      } catch {\n        setError(\"can't find TV information\")\n      } finally {\n        setLoading(false);\n      }\n    } \n    fetchData();\n  }, []);\n\n  return (\n    <TVPresenter \n      popular = { popular }\n      topRated = { topRated }\n      airingToday = { airingToday }\n      error = { error }\n      loading = { loading }\n    />\n  )\n}","import SearchContainer from './SearchContainer';\n\nexport default SearchContainer;","import React, { useState } from 'react';\nimport SearchPresenter from './SearchPresenter';\nimport { moviesApi, tvApi } from 'api';\n\nexport default () => {\n  let [ movieResults, setMovieResults ] = useState(null);\n  let [ tvResultes, setTVResults ] = useState(null);\n  let [ searchTerm, setSearchTerm ] = useState('');\n  let [ error, setError ] = useState(null);\n  let [ loading, setLoading ] = useState(false);\n\n  // useEffect (()=>{\n  //   handleSubmit();\n  // }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(searchTerm !== ''){\n      searchByTerm();\n    }\n  };\n\n  const updateTerm = (e) => {\n    const { target: { value } } = e;\n    setSearchTerm(value);\n    // console.log(value);\n  };\n\n  const searchByTerm = async() => {\n    setLoading(true);\n    try {\n      const {data: {results: movieResults}} = await moviesApi.search(searchTerm);\n      const {data: {results: showResults}} = await tvApi.search(searchTerm);\n      // console.log(movieResults.length, showResults.length);\n\n      setMovieResults(movieResults);\n      setTVResults(showResults);\n    } catch {\n      setError(\"can't find results\")\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return(\n    <SearchPresenter \n      movieResults = { movieResults }\n      tvResultes = { tvResultes }\n      searchTerm = { searchTerm }\n      error = { error }\n      loading = { loading }\n      handleSubmit = { handleSubmit }\n      updateTerm = { updateTerm }\n    />\n  )\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Helmet from 'react-helmet';\nimport Loader from 'Components/Loader';\nimport Message from 'Components/Message';\n\nconst Container = styled.div`\n    position: relative;\n    width: 100%;\n    height: calc(100vh - 50px);\n    padding: 50px;\n`\n\nconst Backdrop = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: url(${props => props.bgImage});\n    background-position: center center;\n    background-size: cover;\n    filter: blur(3px);\n    opacity: 0.5;\n    z-index: 0;\n`\n\nconst Content = styled.div`\n    position: relative;\n    display: flex;\n    width: 100%;\n    height: 100%;\n    z-index: 1;\n`\n\nconst Cover = styled.div`\n    width: 30%;\n    height: 100%;\n    margin-right: 15px;\n    background-image: url(${props => props.bgImage});\n    background-position: center center;\n    background-size: cover;\n    border-radius: 5px;\n`\n\nconst Data = styled.div`\n    width: 70%;\n    margin-left: 10px;\n`\n\nconst Title = styled.h3`\n    font-size: 32px;\n    margin-bottom: 10px;\n`\n\nconst ItemContainer = styled.div`\n    margin: 20px 0;\n`\n\nconst Item = styled.span`\n`\n\nconst Devider = styled.span`\n    margin: 0 10px;\n`\n\nconst Overview = styled.p`\n    width: 50%;\n    margin-top: 10px;\n    font-size: 12px;\n    opacity: 0.7;\n    line-height: 1.5;\n`\n\nconst Detail = ({ \n    result, \n    error, \n    loading \n}) => loading ? (\n        <>\n            <Helmet><title>Loading | Reactflix</title></Helmet>\n            <Loader />\n        </>\n    ) : (\n        error ? \n        <Message /> : \n        <Container>\n            <Helmet>\n                <title>{\n                    result.original_title ? \n                    result.original_title : \n                    result.original_name\n                } | Reactflix</title>\n            </Helmet>\n            <Backdrop \n                bgImage = {`https://image.tmdb.org/t/p/original${result.backdrop_path}`}\n            />\n            <Content>\n                <Cover \n                    bgImage = {result.poster_path ? `https://image.tmdb.org/t/p/original${result.poster_path}` : require(\"../../assets/noPosterSmall.png\")}\n                />\n                <Data>\n                    <Title>{\n                        result.original_title ? \n                        result.original_title : \n                        result.original_name\n                    }</Title>\n                    <ItemContainer>\n                        <Item>{\n                            result.release_date ? \n                            result.release_date.substring(0, 4) : \n                            result.first_air_date.substring(0, 4)\n                        }</Item>\n                        <Devider>・</Devider>\n                        <Item>\n                            {result.runtime ?\n                            result.runtime : \n                            result.episode_run_time} min\n                        </Item>\n                        <Devider>・</Devider>\n                        <Item>{\n                            result.genres && \n                            result.genres.map((genre, index) => index === result.genres.length - 1 ? \n                            genre.name : \n                            `${genre.name} / ` )\n                        }</Item>\n                        <Overview>{result.overview}</Overview>\n                    </ItemContainer>\n                </Data>\n            </Content>\n        </Container>\n    )\n\nDetail.propTypes = {\n    result: PropTypes.object,\n    error: PropTypes.string,\n    loading: PropTypes.bool.isRequired\n}\n\nexport default Detail;","import DetailContainer from './DetailContainer';\n\nexport default DetailContainer;","import React, { useState, useEffect } from 'react';\nimport DetailPresenter from './DetailPresenter';\nimport { moviesApi, tvApi } from 'api';\n\nexport default (props) => {\n  const { location: {pathname} } = props;\n  let [ result, setResult ] = useState(null);\n  let [ error, setError ] = useState(null);\n  let [ loading, setLoading ] = useState(true);\n  let isMovie = pathname.includes('/movie/');\n\n  // console.log(props);\n  useEffect(()=>{\n    const fetchData = async() => {\n      const {match: {params: { id }}, history: {push}} = props;\n      const parsedId = parseInt(id);\n      let result;\n\n      if(isNaN(parsedId)) {\n        return push('/');\n      }\n\n      try {\n        if(isMovie) {\n          ({data: result} = await moviesApi.movieDetail(parsedId))\n        } else {\n          ({data: result} = await tvApi.showDetail(parsedId))\n        }\n        console.log(result);\n        setResult(result)\n\n      } catch {\n        setError (\"can't find anything\")\n      } finally {\n        setLoading(false);\n        // setResult();\n      }\n      // console.log(id);\n      // console.log(isMovie);\n    }\n\n    fetchData();\n  },[])\n\n  return (\n    <DetailPresenter \n      result = { result }\n      error = { error }\n      loading = { loading }\n    />\n  )\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport Header from 'Components/Header';\nimport Home from 'Routes/Home';\nimport TV from 'Routes/TV';\nimport Search from 'Routes/Search';\nimport Detail from 'Routes/Detail';\n\nexport default () => (\n  <Router>\n    <Header />\n    <Switch>\n      <Route path=\"/\" exact component={ Home } />\n      <Route path=\"/tv\" exact component={ TV } />\n      <Route path=\"/tv/popular\" render={()=><h1>Popular</h1>} />\n      <Route path=\"/search\" component={ Search } />\n      <Route path=\"/movie/:id\" component={ Detail } />\n      <Route path=\"/show/:id\" component={ Detail } />\n      <Redirect from=\"*\" to=\"/\" /> \n      {/* 일치하는 페이지가 없을 때 to=\"/\" 로 보내줌 */}\n    </Switch>\n  </Router>\n)","import { createGlobalStyle } from 'styled-components';\nimport reset from 'styled-reset';\n\nconst globalStyles = createGlobalStyle`\n  ${reset};\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  body {\n    padding-top: 50px;\n    font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxgen, Ubuntu, Canta;\n    font-size: 12px;\n    color: #fff;\n    background-color: rgba(20, 20, 20, 1);\n  }\n`;\n\nexport default globalStyles;","import React from 'react';\nimport Router from 'Components/Router';\nimport GlobalStyles from 'Components/GlobalStyles';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router />\n      <GlobalStyles />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'Components/App';\nimport reportWebVitals from './reportWebVitals';\n// 확인용 import './api.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}